{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","Component","constructor","props","super","this","editItem","index","todos","state","list","editedTodo","prompt","trim","updatedTodos","value","setState","userInput","updateInput","addItem","id","Math","random","push","deleteItem","key","updateList","filter","item","render","React","createElement","Container","Row","style","display","justifyContent","alignItems","fontSize","fontWeight","Col","md","span","offset","InputGroup","className","FormControl","placeholder","size","onChange","target","aria-label","aria-describedby","Button","variant","onClick","ListGroup","map","Item","action","marginRight","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode"],"mappings":"kQA4JeA,MAjJf,cAAkBC,YACdC,YAAYC,GACRC,MAAMD,GAENE,KAkDJC,SAAYC,KACV,MAAMC,EAAQ,IAAIH,KAAKI,MAAMC,MACvBC,EAAaC,OAAO,kBAC1B,GAAmB,OAAfD,GAA6C,KAAtBA,EAAWE,OAAe,CACnD,IAAIC,EAAe,IAAIN,GACvBM,EAAaP,GAAOQ,MAAOJ,EAC3BN,KAAKW,SAAS,CACZN,KAAMI,OAxDRT,KAAKI,MAAQ,CACTQ,UAAW,GACXP,KAAM,IAKdQ,YAAYH,GACRV,KAAKW,SAAS,CACVC,UAAWF,IAKnBI,UACI,GAA6B,KAAzBd,KAAKI,MAAMQ,UAAkB,CAC7B,MAAMA,EAAY,CAEdG,GAAIC,KAAKC,SAGTP,MAAOV,KAAKI,MAAMQ,WAIhBP,EAAO,IAAIL,KAAKI,MAAMC,MAC5BA,EAAKa,KAAKN,GAGVZ,KAAKW,SAAS,CACVN,OACAO,UAAW,MAMvBO,WAAWC,GACP,MAGMC,EAHO,IAAIrB,KAAKI,MAAMC,MAGJiB,OAAQC,GAASA,EAAKR,KAAOK,GAGrDpB,KAAKW,SAAS,CACVN,KAAMgB,IAgBdG,SACI,OACIC,IAAAC,cAACC,IAAS,KACNF,IAAAC,cAACE,IAAG,CACAC,MAAO,CACHC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,SAAU,OACVC,WAAY,WAEnB,aAIDT,IAAAC,cAAA,WACAD,IAAAC,cAACE,IAAG,KACAH,IAAAC,cAACS,IAAG,CAACC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxBb,IAAAC,cAACa,IAAU,CAACC,UAAU,QAClBf,IAAAC,cAACe,IAAW,CACRC,YAAY,kBACZC,KAAK,KACLjC,MAAOV,KAAKI,MAAMQ,UAClBgC,SAAWrB,GACPvB,KAAKa,YAAYU,EAAKsB,OAAOnC,OAEjCoC,aAAW,gBACXC,mBAAiB,iBAErBtB,IAAAC,cAACa,IAAU,KACPd,IAAAC,cAACsB,IAAM,CACHC,QAAQ,OACRT,UAAU,OACVU,QAASA,IAAMlD,KAAKc,WACvB,WAOjBW,IAAAC,cAACE,IAAG,KACAH,IAAAC,cAACS,IAAG,CAACC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxBb,IAAAC,cAACyB,IAAS,KAELnD,KAAKI,MAAMC,KAAK+C,IAAI,CAAC7B,EAAMrB,IAEtBuB,IAAAC,cAAA,OAAKN,IAAOlB,GACVuB,IAAAC,cAACyB,IAAUE,KAAI,CACXJ,QAAQ,OACRK,QAAM,EACNzB,MAAO,CAACC,QAAQ,OACRC,eAAe,kBAGtBR,EAAKb,MACNe,IAAAC,cAAA,YACAD,IAAAC,cAACsB,IAAM,CAACnB,MAAO,CAAC0B,YAAY,QAC5BN,QAAU,QACVC,QAASA,IAAMlD,KAAKmB,WAAWI,EAAKR,KAAK,UAGzCU,IAAAC,cAACsB,IAAM,CAACC,QAAU,QAClBC,QAASA,IAAMlD,KAAKC,SAASC,IAAQ,kBChI9DsD,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,YCCDY,IAASC,WAAWC,SAASC,eAAe,SACpDhD,OACHC,IAAAC,cAACD,IAAMgD,WAAU,KACfhD,IAAAC,cAAC/B,EAAG,QAOR6D","file":"static/js/main.97fbe340.chunk.js","sourcesContent":["// App.js File\nimport React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        // Setting up state\n        this.state = {\n            userInput: \"\",\n            list: [],\n        };\n    }\n\n    // Set a user input value\n    updateInput(value) {\n        this.setState({\n            userInput: value,\n        });\n    }\n\n    // Add item if user input in not empty\n    addItem() {\n        if (this.state.userInput !== \"\") {\n            const userInput = {\n                // Add a random id which is used to delete\n                id: Math.random(),\n\n                // Add a user value to list\n                value: this.state.userInput,\n            };\n\n            // Update list\n            const list = [...this.state.list];\n            list.push(userInput);\n\n            // reset state\n            this.setState({\n                list,\n                userInput: \"\",\n            });\n        }\n    }\n\n    // Function to delete item from list use id to delete\n    deleteItem(key) {\n        const list = [...this.state.list];\n\n        // Filter values and leave value which we need to delete\n        const updateList = list.filter((item) => item.id !== key);\n\n        // Update list in state\n        this.setState({\n            list: updateList,\n        });\n    }\n\n    editItem = (index) => {\n      const todos = [...this.state.list];\n      const editedTodo = prompt('Edit the todo:');\n      if (editedTodo !== null && editedTodo.trim() !== '') {\n        let updatedTodos = [...todos]\n        updatedTodos[index].value= editedTodo\n        this.setState({\n          list: updatedTodos,\n      });\n      }\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        fontSize: \"3rem\",\n                        fontWeight: \"bolder\",\n                    }}\n                >\n                    TODO LIST\n                </Row>\n\n                <hr />\n                <Row>\n                    <Col md={{ span: 5, offset: 4 }}>\n                        <InputGroup className=\"mb-3\">\n                            <FormControl\n                                placeholder=\"add item . . . \"\n                                size=\"lg\"\n                                value={this.state.userInput}\n                                onChange={(item) =>\n                                    this.updateInput(item.target.value)\n                                }\n                                aria-label=\"add something\"\n                                aria-describedby=\"basic-addon2\"\n                            />\n                            <InputGroup>\n                                <Button\n                                    variant=\"dark\"\n                                    className=\"mt-2\"\n                                    onClick={() => this.addItem()}\n                                >\n                                    ADD\n                                </Button>\n                            </InputGroup>\n                        </InputGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={{ span: 5, offset: 4 }}>\n                        <ListGroup>\n                            {/* map over and print items */}\n                            {this.state.list.map((item, index) => {\n                                return (\n                                  <div key = {index} > \n                                    <ListGroup.Item\n                                        variant=\"dark\"\n                                        action\n                                        style={{display:\"flex\",\n                                                justifyContent:'space-between'\n                                      }}\n                                    >\n                                        {item.value}\n                                        <span>\n                                        <Button style={{marginRight:\"10px\"}}\n                                        variant = \"light\"\n                                        onClick={() => this.deleteItem(item.id)}>\n                                          Delete\n                                        </Button>\n                                        <Button variant = \"light\"\n                                        onClick={() => this.editItem(index)}>\n                                          Edit\n                                        </Button>\n                                        </span>\n                                    </ListGroup.Item>\n                                  </div>\n                                );\n                            })}\n                        </ListGroup>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}